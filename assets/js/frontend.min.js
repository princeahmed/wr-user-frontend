/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/components/account.js":
/*!**************************************!*\
  !*** ./src/js/components/account.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
  $(document).ready(function () {
    initActiveTab();
    $(document).on('click', '.change-password-button', togglePassFields);
    $(document).on('click', '.to-dashboard, .to-favourites, .to-edit-account', setActiveTab);
    $(document).on('click', '#load_more_favourites', loadMoreFavorites);

    function togglePassFields() {
      $('.change-password-fields').toggle();
    }

    function setActiveTab(e) {
      e.preventDefault();
      var selectors = $(this);
      var target = $(this).attr('data-target');
      selectors = selectors.add(target);
      $('.wp-radio-my-account-content>div, .wp-radio-my-account-navigation>ul>li').removeClass('active');
      selectors.addClass('active');
      localStorage.setItem('wp_radio_myaccount_active_tab', target);
    }

    function initActiveTab() {
      var target = localStorage.getItem('wp_radio_myaccount_active_tab');

      if (target) {
        $(target).addClass('active');
        $("li[data-target=\"".concat(target, "\"]")).addClass('active');
      } else {
        $('.content-dashboard').addClass('active');
        $("li[data-target=\".content-dashbord\"]").addClass('active');
      }
    }

    function loadMoreFavorites(e) {
      var _this = this;

      e.preventDefault();
      $('img', $(this)).show();
      var $this = $(this);
      var offset = $(this).attr('data-offset');
      $.ajax({
        url: wpradio.ajaxUrl,
        data: {
          action: 'load_more_favourites',
          offset: offset
        },
        success: function success(_ref) {
          var data = _ref.data;

          if (data && data.html) {
            $('.wp-radio-favourites').append(data.html);
            $this.attr('data-offset', offset + 15);
          } else {
            $this.text('No More Favorites!');
          }
        },
        error: function error(_error) {
          $this.text('No More Favorites!');
          console.log(_error);
        },
        complete: function complete() {
          $('img', $(_this)).hide();
        }
      });
    }
  });
})(jQuery);

/***/ }),

/***/ "./src/js/components/helper.js":
/*!*************************************!*\
  !*** ./src/js/components/helper.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
  $(document).ready(function () {
    $('.wp-radio-select2').select2();
  });
})(jQuery);

/***/ }),

/***/ "./src/js/components/player.js":
/*!*************************************!*\
  !*** ./src/js/components/player.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
  $(document).ready(function () {
    checkAllFavorites();
    $(document).on('click', '.add-favourite', addFavorite);
    $(window).on('setPlayerData', checkAllFavorites);
    /**
     * Add selected station to favourites list
     */

    function addFavorite() {
      if ($(this).hasClass('disabled')) {
        alert(WRUF.i18n.loginAlert);
        return;
      }

      var $this = $(this);
      var type = $this.hasClass('added') ? 'remove' : 'add';
      var parent = null;

      if ($this.parents('.wp-radio-player').length) {
        parent = $this.parents('.wp-radio-player');
      } else if ($this.parents('.wp-radio-single').length) {
        parent = $this.parents('.wp-radio-single');
      } else if ($this.parents('.wp-radio-listing').length) {
        parent = $this.parents('.wp-radio-listing');
      }

      if (!parent) {
        return;
      }

      var stream = $('.wp-radio-player-play-pause', parent).attr('data-stream');
      var streamId = JSON.parse(stream).streamId;
      $.ajax({
        url: wpradio.ajaxUrl,
        data: {
          action: 'add_favourites',
          type: type,
          id: streamId
        },
        success: function success(_ref) {
          var data = _ref.data;

          if (data.success) {
            localStorage.setItem('favorite_stations', JSON.stringify(data.favorites));
            checkAllFavorites();
          }
        },
        error: function error(_error) {
          return console.log(_error);
        }
      });
    }

    function checkAllFavorites() {
      var favorites = localStorage.getItem('favorite_stations');
      if (!favorites) return;
      favorites = JSON.parse(favorites);
      if (!Array.isArray(favorites)) return;
      var favourite = $('.add-favourite');

      if (favourite.length) {
        favourite.each(function () {
          var $this = $(this);
          var parent = null;

          if ($this.parents('.wp-radio-player').length) {
            parent = $this.parents('.wp-radio-player');
          } else if ($this.parents('.wp-radio-single').length) {
            parent = $this.parents('.wp-radio-single');
          } else if ($this.parents('.wp-radio-listing').length) {
            parent = $this.parents('.wp-radio-listing');
          }

          if (!parent) {
            return;
          }

          var stream = $('.wp-radio-player-play-pause', parent).attr('data-stream');
          if (!stream) return;

          try {
            stream = JSON.parse(stream);
          } catch (e) {
            return;
          }

          var id = parseInt(stream.streamId);
          var is_added = favorites.includes(id);
          checkFavorite(id, is_added);
        });
      }
    }
    /**
     * Check if the selected station is in favourite list or not
     */


    function checkFavorite(id, is_added) {
      //player
      var player = $('#wp-radio-player');

      if (player.length) {
        var stream = $('.wp-radio-player-play-pause', player).attr('data-stream');

        if (stream) {
          stream = JSON.parse(stream);

          if (String(id) === String(stream.streamId)) {
            if (is_added) {
              $('.add-favourite', player).addClass('added');
            } else {
              $('.add-favourite', player).removeClass('added');
            }
          }
        }
      } //shortcode


      var shortcode_player = $("#wp-radio-shortcode-player-".concat(id));

      if (shortcode_player.length) {
        if (is_added) {
          $('.add-favourite', shortcode_player).addClass('added');
        } else {
          $('.add-favourite', shortcode_player).removeClass('added');
        }
      } //single


      var single_player = $("#single-radio-".concat(id));

      if (single_player.length) {
        if (is_added) {
          $('.wp-radio-header .add-favourite', single_player).addClass('added');
        } else {
          $('.wp-radio-header .add-favourite', single_player).removeClass('added');
        }
      } //listing


      var listing_player = $(".wp-radio-listing-".concat(id));

      if (listing_player.length) {
        if (is_added) {
          $('.add-favourite', listing_player).addClass('added');
        } else {
          $('.add-favourite', listing_player).removeClass('added');
        }
      }
    }
  });
})(jQuery);

/***/ }),

/***/ "./src/js/components/report.js":
/*!*************************************!*\
  !*** ./src/js/components/report.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
  $(document).ready(function () {
    var selector = $('.report-form-wrapper');

    if (!selector.length) {
      return;
    }

    var closeForm = function closeForm() {
      return selector.removeClass('active');
    };

    $(document).on('click', '.open-popup', setData);
    $(document).on('click', '.report-form', function (e) {
      return e.stopPropagation();
    });
    $(document).on('click', '.report-close', closeForm);
    $(document).on('click', '.report-form-wrapper', closeForm);
    $(document).on('click', '.report-submit', ajaxSend);

    function setData() {
      selector.addClass('active');
      var player = $(this).parents('.wp-radio-player');
      var stream = $('.wp-radio-player-play-pause', player).attr('data-stream');

      if (stream) {
        stream = JSON.parse(stream);
      }

      var title = typeof $(this).attr('data-name') !== 'undefined' ? $(this).attr('data-name') : stream.title,
          id = typeof $(this).attr('data-id') !== 'undefined' ? $(this).attr('data-id') : stream.streamId;
      $('#report-radio').text(title);
      $('#report-radio-id').val(id);
    }

    function ajaxSend(e) {
      var _this = this;

      e.preventDefault();

      if ($('#report-email').val() === '' || $('#issue').val() === '') {
        $('#report-validation').fadeIn();
        return;
      }

      $(this).text(wpradio.i18n.sending);
      var data = $('.report-form').serialize();
      $.ajax({
        url: wpradio.ajaxUrl,
        data: {
          action: 'send_report',
          data: data,
          nonce: wpradio.nonce
        },
        success: function success() {
          $('.report-form').addClass('submitted');
          setTimeout(function () {
            selector.removeClass('active');
            $('.report-form').removeClass('submitted');
            $(_this).text(wpradio.i18n.sendMessage);
          }, 3000);
        },
        error: function error(_error) {
          return console.log(_error);
        }
      });
    }
  });
})(jQuery);

/***/ }),

/***/ "./src/js/components/review.js":
/*!*************************************!*\
  !*** ./src/js/components/review.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
  $(document).ready(function () {
    $(document).on('click', '.set-review-stars>.star', setReview);
    $(document).on('click', '#review_submit', submitReview);
    $(document).on('click', '.load-more-review', loadMoreReviews);

    function setReview() {
      var selectors = $(this);
      selectors = selectors.add(selectors.prevAll());
      var de_selectors = $(this).nextAll();
      selectors.addClass('dashicons-star-filled').removeClass('dashicons-star-empty');
      de_selectors.addClass('dashicons-star-empty').removeClass('dashicons-star-filled');
      $(this).parent().next().val($(this).attr('data-rate'));
    }

    function submitReview(e) {
      e.preventDefault();

      if ($(this).hasClass('disabled')) {
        alert('Please, Login to submit a review for this radio station.');
        return;
      }

      if ($('#rating').val() === '' || $('#review').val() === '') {
        $('.review-form-notices').addClass('error show').text('Please fill all the fields.');
        return;
      }

      var formData = $('#review-form').serialize();
      $.ajax({
        url: wpradio.ajaxUrl,
        data: {
          action: 'submit_review',
          formData: formData,
          nonce: wpradio.nonce
        },
        success: function success(_ref) {
          var data = _ref.data;

          if (data.update || $('.review-listing>.current-user-review').length) {
            $('.review-listing>.current-user-review').replaceWith(data.html);
          } else {
            var title = $('.review-listing>h3');

            if (title.length) {
              title.after(data.html);
            } else {
              $('.review-listing').append(data.html);
            }
          }

          $('.review-form-notices').addClass('success show').text('Your review has been submitted.');
        },
        error: function error(_error) {
          return console.log(_error);
        }
      });
    }

    function loadMoreReviews(e) {
      e.preventDefault();
      var $this = $(this);
      var offset = $(this).attr('data-offset');
      $.ajax({
        url: wpradio.ajaxUrl,
        data: {
          action: 'load_more_reviews',
          offset: offset
        },
        success: function success(_ref2) {
          var data = _ref2.data;
          $('.review-listing').append(data.html);
          $this.attr('data-offset', offset + 10);
        },
        error: function error(_error2) {
          $this.text('No More Reviews!');
          console.log(_error2);
        }
      });
    }
  });
})(jQuery);

/***/ }),

/***/ "./src/js/frontend.js":
/*!****************************!*\
  !*** ./src/js/frontend.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_components_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../js/components/helper */ "./src/js/components/helper.js");
/* harmony import */ var _js_components_helper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_components_helper__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_components_player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../js/components/player */ "./src/js/components/player.js");
/* harmony import */ var _js_components_player__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_js_components_player__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _js_components_review__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../js/components/review */ "./src/js/components/review.js");
/* harmony import */ var _js_components_review__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_components_review__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _js_components_account__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../js/components/account */ "./src/js/components/account.js");
/* harmony import */ var _js_components_account__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_components_account__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _js_components_report__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../js/components/report */ "./src/js/components/report.js");
/* harmony import */ var _js_components_report__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_components_report__WEBPACK_IMPORTED_MODULE_4__);






/***/ }),

/***/ 0:
/*!**********************************!*\
  !*** multi ./src/js/frontend.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wpmilitary\wp-content\plugins\wr-user-frontend\src\js\frontend.js */"./src/js/frontend.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvYWNjb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvcGxheWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL3JlcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9yZXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2Zyb250ZW5kLmpzIl0sIm5hbWVzIjpbIiQiLCJkb2N1bWVudCIsInJlYWR5IiwiaW5pdEFjdGl2ZVRhYiIsIm9uIiwidG9nZ2xlUGFzc0ZpZWxkcyIsInNldEFjdGl2ZVRhYiIsImxvYWRNb3JlRmF2b3JpdGVzIiwidG9nZ2xlIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic2VsZWN0b3JzIiwidGFyZ2V0IiwiYXR0ciIsImFkZCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInNob3ciLCIkdGhpcyIsIm9mZnNldCIsImFqYXgiLCJ1cmwiLCJ3cHJhZGlvIiwiYWpheFVybCIsImRhdGEiLCJhY3Rpb24iLCJzdWNjZXNzIiwiaHRtbCIsImFwcGVuZCIsInRleHQiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJjb21wbGV0ZSIsImhpZGUiLCJqUXVlcnkiLCJzZWxlY3QyIiwiY2hlY2tBbGxGYXZvcml0ZXMiLCJhZGRGYXZvcml0ZSIsIndpbmRvdyIsImhhc0NsYXNzIiwiYWxlcnQiLCJXUlVGIiwiaTE4biIsImxvZ2luQWxlcnQiLCJ0eXBlIiwicGFyZW50IiwicGFyZW50cyIsImxlbmd0aCIsInN0cmVhbSIsInN0cmVhbUlkIiwiSlNPTiIsInBhcnNlIiwiaWQiLCJzdHJpbmdpZnkiLCJmYXZvcml0ZXMiLCJBcnJheSIsImlzQXJyYXkiLCJmYXZvdXJpdGUiLCJlYWNoIiwicGFyc2VJbnQiLCJpc19hZGRlZCIsImluY2x1ZGVzIiwiY2hlY2tGYXZvcml0ZSIsInBsYXllciIsIlN0cmluZyIsInNob3J0Y29kZV9wbGF5ZXIiLCJzaW5nbGVfcGxheWVyIiwibGlzdGluZ19wbGF5ZXIiLCJzZWxlY3RvciIsImNsb3NlRm9ybSIsInNldERhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJhamF4U2VuZCIsInRpdGxlIiwidmFsIiwiZmFkZUluIiwic2VuZGluZyIsInNlcmlhbGl6ZSIsIm5vbmNlIiwic2V0VGltZW91dCIsInNlbmRNZXNzYWdlIiwic2V0UmV2aWV3Iiwic3VibWl0UmV2aWV3IiwibG9hZE1vcmVSZXZpZXdzIiwicHJldkFsbCIsImRlX3NlbGVjdG9ycyIsIm5leHRBbGwiLCJuZXh0IiwiZm9ybURhdGEiLCJ1cGRhdGUiLCJyZXBsYWNlV2l0aCIsImFmdGVyIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7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ckJKLE9BQVA7QUF1Qkg7O0FBRUQsYUFBU3NELGVBQVQsQ0FBeUI5RSxDQUF6QixFQUE0QjtBQUN4QkEsT0FBQyxDQUFDQyxjQUFGO0FBQ0EsVUFBTVcsS0FBSyxHQUFHckIsQ0FBQyxDQUFDLElBQUQsQ0FBZjtBQUNBLFVBQU1zQixNQUFNLEdBQUd0QixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFhLElBQVIsQ0FBYSxhQUFiLENBQWY7QUFFQWIsT0FBQyxDQUFDdUIsSUFBRixDQUFPO0FBQ0hDLFdBQUcsRUFBRUMsT0FBTyxDQUFDQyxPQURWO0FBR0hDLFlBQUksRUFBRTtBQUNGQyxnQkFBTSxFQUFFLG1CQUROO0FBRUZOLGdCQUFNLEVBQU5BO0FBRkUsU0FISDtBQU9ITyxlQUFPLEVBQUUsd0JBQVk7QUFBQSxjQUFWRixJQUFVLFNBQVZBLElBQVU7QUFDakIzQixXQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQitCLE1BQXJCLENBQTRCSixJQUFJLENBQUNHLElBQWpDO0FBQ0FULGVBQUssQ0FBQ1IsSUFBTixDQUFXLGFBQVgsRUFBMEJTLE1BQU0sR0FBRyxFQUFuQztBQUNILFNBVkU7QUFXSFcsYUFBSyxFQUFFLGVBQUFBLE9BQUssRUFBSTtBQUNaWixlQUFLLENBQUNXLElBQU4sQ0FBVyxrQkFBWDtBQUNBRSxpQkFBTyxDQUFDQyxHQUFSLENBQVlGLE9BQVo7QUFDSDtBQWRFLE9BQVA7QUFnQkg7QUFFSixHQWhGRDtBQWlGSCxDQWxGRCxFQWtGR0ssTUFsRkgsRTs7Ozs7Ozs7Ozs7O0FDQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImZyb250ZW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiKGZ1bmN0aW9uICgkKSB7XHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW5pdEFjdGl2ZVRhYigpO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuY2hhbmdlLXBhc3N3b3JkLWJ1dHRvbicsIHRvZ2dsZVBhc3NGaWVsZHMpO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcudG8tZGFzaGJvYXJkLCAudG8tZmF2b3VyaXRlcywgLnRvLWVkaXQtYWNjb3VudCcsIHNldEFjdGl2ZVRhYik7XHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNsb2FkX21vcmVfZmF2b3VyaXRlcycsIGxvYWRNb3JlRmF2b3JpdGVzKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlUGFzc0ZpZWxkcygpIHtcclxuICAgICAgICAgICAgJCgnLmNoYW5nZS1wYXNzd29yZC1maWVsZHMnKS50b2dnbGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldEFjdGl2ZVRhYihlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZWxlY3RvcnMgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdGFyZ2V0Jyk7XHJcbiAgICAgICAgICAgIHNlbGVjdG9ycyA9IHNlbGVjdG9ycy5hZGQodGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICQoJy53cC1yYWRpby1teS1hY2NvdW50LWNvbnRlbnQ+ZGl2LCAud3AtcmFkaW8tbXktYWNjb3VudC1uYXZpZ2F0aW9uPnVsPmxpJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgc2VsZWN0b3JzLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3cF9yYWRpb19teWFjY291bnRfYWN0aXZlX3RhYicsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbml0QWN0aXZlVGFiKCkge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnd3BfcmFkaW9fbXlhY2NvdW50X2FjdGl2ZV90YWInKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICQodGFyZ2V0KS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAkKGBsaVtkYXRhLXRhcmdldD1cIiR7dGFyZ2V0fVwiXWApLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJy5jb250ZW50LWRhc2hib2FyZCcpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICQoYGxpW2RhdGEtdGFyZ2V0PVwiLmNvbnRlbnQtZGFzaGJvcmRcIl1gKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRNb3JlRmF2b3JpdGVzKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgJCgnaW1nJywgJCh0aGlzKSkuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtb2Zmc2V0Jyk7XHJcblxyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiB3cHJhZGlvLmFqYXhVcmwsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnbG9hZF9tb3JlX2Zhdm91cml0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoe2RhdGF9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5odG1sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy53cC1yYWRpby1mYXZvdXJpdGVzJykuYXBwZW5kKGRhdGEuaHRtbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmF0dHIoJ2RhdGEtb2Zmc2V0Jywgb2Zmc2V0ICsgMTUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnRleHQoJ05vIE1vcmUgRmF2b3JpdGVzIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnRleHQoJ05vIE1vcmUgRmF2b3JpdGVzIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW1nJywgJCh0aGlzKSkuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn0pKGpRdWVyeSk7IiwiKGZ1bmN0aW9uICgkKSB7XHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCgnLndwLXJhZGlvLXNlbGVjdDInKS5zZWxlY3QyKCk7XHJcbiAgICB9KTtcclxufSkoalF1ZXJ5KTsiLCIoZnVuY3Rpb24gKCQpIHtcclxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgY2hlY2tBbGxGYXZvcml0ZXMoKTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5hZGQtZmF2b3VyaXRlJywgYWRkRmF2b3JpdGUpO1xyXG4gICAgICAgICQod2luZG93KS5vbignc2V0UGxheWVyRGF0YScsIGNoZWNrQWxsRmF2b3JpdGVzKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkIHNlbGVjdGVkIHN0YXRpb24gdG8gZmF2b3VyaXRlcyBsaXN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkRmF2b3JpdGUoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoV1JVRi5pMThuLmxvZ2luQWxlcnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCAkdGhpcyA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAkdGhpcy5oYXNDbGFzcygnYWRkZWQnKSA/ICdyZW1vdmUnIDogJ2FkZCc7XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1wbGF5ZXInKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudCA9ICR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1wbGF5ZXInKVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1zaW5nbGUnKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudCA9ICR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1zaW5nbGUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkdGhpcy5wYXJlbnRzKCcud3AtcmFkaW8tbGlzdGluZycpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gJHRoaXMucGFyZW50cygnLndwLXJhZGlvLWxpc3RpbmcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHN0cmVhbSA9ICQoJy53cC1yYWRpby1wbGF5ZXItcGxheS1wYXVzZScsIHBhcmVudCkuYXR0cignZGF0YS1zdHJlYW0nKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbUlkID0gSlNPTi5wYXJzZShzdHJlYW0pLnN0cmVhbUlkO1xyXG5cclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHVybDogd3ByYWRpby5hamF4VXJsLFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2FkZF9mYXZvdXJpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBzdHJlYW1JZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoe2RhdGF9KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Zhdm9yaXRlX3N0YXRpb25zJywgSlNPTi5zdHJpbmdpZnkoZGF0YS5mYXZvcml0ZXMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrQWxsRmF2b3JpdGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpLFxyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjaGVja0FsbEZhdm9yaXRlcygpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBmYXZvcml0ZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZmF2b3JpdGVfc3RhdGlvbnMnKTtcclxuICAgICAgICAgICAgaWYgKCFmYXZvcml0ZXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGZhdm9yaXRlcyA9IEpTT04ucGFyc2UoZmF2b3JpdGVzKTtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZhdm9yaXRlcykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZhdm91cml0ZSA9ICQoJy5hZGQtZmF2b3VyaXRlJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmF2b3VyaXRlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZmF2b3VyaXRlLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1wbGF5ZXInKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gJHRoaXMucGFyZW50cygnLndwLXJhZGlvLXBsYXllcicpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkdGhpcy5wYXJlbnRzKCcud3AtcmFkaW8tc2luZ2xlJykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9ICR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1zaW5nbGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1saXN0aW5nJykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9ICR0aGlzLnBhcmVudHMoJy53cC1yYWRpby1saXN0aW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RyZWFtID0gJCgnLndwLXJhZGlvLXBsYXllci1wbGF5LXBhdXNlJywgcGFyZW50KS5hdHRyKCdkYXRhLXN0cmVhbScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmVhbSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbSA9IEpTT04ucGFyc2Uoc3RyZWFtKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQoc3RyZWFtLnN0cmVhbUlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNfYWRkZWQgPSBmYXZvcml0ZXMuaW5jbHVkZXMoaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjaGVja0Zhdm9yaXRlKGlkLCBpc19hZGRlZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrIGlmIHRoZSBzZWxlY3RlZCBzdGF0aW9uIGlzIGluIGZhdm91cml0ZSBsaXN0IG9yIG5vdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrRmF2b3JpdGUoaWQsIGlzX2FkZGVkKSB7XHJcblxyXG4gICAgICAgICAgICAvL3BsYXllclxyXG4gICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSAkKCcjd3AtcmFkaW8tcGxheWVyJyk7XHJcbiAgICAgICAgICAgIGlmIChwbGF5ZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyZWFtID0gJCgnLndwLXJhZGlvLXBsYXllci1wbGF5LXBhdXNlJywgcGxheWVyKS5hdHRyKCdkYXRhLXN0cmVhbScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYW0gPSBKU09OLnBhcnNlKHN0cmVhbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoaWQpID09PSBTdHJpbmcoc3RyZWFtLnN0cmVhbUlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNfYWRkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hZGQtZmF2b3VyaXRlJywgcGxheWVyKS5hZGRDbGFzcygnYWRkZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hZGQtZmF2b3VyaXRlJywgcGxheWVyKS5yZW1vdmVDbGFzcygnYWRkZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9zaG9ydGNvZGVcclxuICAgICAgICAgICAgY29uc3Qgc2hvcnRjb2RlX3BsYXllciA9ICQoYCN3cC1yYWRpby1zaG9ydGNvZGUtcGxheWVyLSR7aWR9YCk7XHJcbiAgICAgICAgICAgIGlmIChzaG9ydGNvZGVfcGxheWVyLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc19hZGRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5hZGQtZmF2b3VyaXRlJywgc2hvcnRjb2RlX3BsYXllcikuYWRkQ2xhc3MoJ2FkZGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5hZGQtZmF2b3VyaXRlJywgc2hvcnRjb2RlX3BsYXllcikucmVtb3ZlQ2xhc3MoJ2FkZGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vc2luZ2xlXHJcbiAgICAgICAgICAgIGNvbnN0IHNpbmdsZV9wbGF5ZXIgPSAkKGAjc2luZ2xlLXJhZGlvLSR7aWR9YCk7XHJcbiAgICAgICAgICAgIGlmIChzaW5nbGVfcGxheWVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzX2FkZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLndwLXJhZGlvLWhlYWRlciAuYWRkLWZhdm91cml0ZScsIHNpbmdsZV9wbGF5ZXIpLmFkZENsYXNzKCdhZGRlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcud3AtcmFkaW8taGVhZGVyIC5hZGQtZmF2b3VyaXRlJywgc2luZ2xlX3BsYXllcikucmVtb3ZlQ2xhc3MoJ2FkZGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vbGlzdGluZ1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0aW5nX3BsYXllciA9ICQoYC53cC1yYWRpby1saXN0aW5nLSR7aWR9YCk7XHJcbiAgICAgICAgICAgIGlmIChsaXN0aW5nX3BsYXllci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc19hZGRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5hZGQtZmF2b3VyaXRlJywgbGlzdGluZ19wbGF5ZXIpLmFkZENsYXNzKCdhZGRlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcuYWRkLWZhdm91cml0ZScsIGxpc3RpbmdfcGxheWVyKS5yZW1vdmVDbGFzcygnYWRkZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn0pKGpRdWVyeSk7IiwiKGZ1bmN0aW9uICgkKSB7XHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gJCgnLnJlcG9ydC1mb3JtLXdyYXBwZXInKTtcclxuXHJcbiAgICAgICAgaWYgKCFzZWxlY3Rvci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY2xvc2VGb3JtID0gKCkgPT4gc2VsZWN0b3IucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLm9wZW4tcG9wdXAnLCBzZXREYXRhKTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5yZXBvcnQtZm9ybScsIChlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpKTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5yZXBvcnQtY2xvc2UnLCBjbG9zZUZvcm0pO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcucmVwb3J0LWZvcm0td3JhcHBlcicsIGNsb3NlRm9ybSk7XHJcblxyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcucmVwb3J0LXN1Ym1pdCcsIGFqYXhTZW5kKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0RGF0YSgpIHtcclxuXHJcbiAgICAgICAgICAgIHNlbGVjdG9yLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllciA9ICQodGhpcykucGFyZW50cygnLndwLXJhZGlvLXBsYXllcicpO1xyXG4gICAgICAgICAgICBsZXQgc3RyZWFtID0gJCgnLndwLXJhZGlvLXBsYXllci1wbGF5LXBhdXNlJywgcGxheWVyKS5hdHRyKCdkYXRhLXN0cmVhbScpO1xyXG4gICAgICAgICAgICBpZiAoc3RyZWFtKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJlYW0gPSBKU09OLnBhcnNlKHN0cmVhbSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdHlwZW9mICQodGhpcykuYXR0cignZGF0YS1uYW1lJykgIT09ICd1bmRlZmluZWQnID8gJCh0aGlzKS5hdHRyKCdkYXRhLW5hbWUnKSA6IHN0cmVhbS50aXRsZSxcclxuICAgICAgICAgICAgICAgIGlkID0gdHlwZW9mICQodGhpcykuYXR0cignZGF0YS1pZCcpICE9PSAndW5kZWZpbmVkJyA/ICQodGhpcykuYXR0cignZGF0YS1pZCcpIDogc3RyZWFtLnN0cmVhbUlkO1xyXG5cclxuICAgICAgICAgICAgJCgnI3JlcG9ydC1yYWRpbycpLnRleHQodGl0bGUpO1xyXG4gICAgICAgICAgICAkKCcjcmVwb3J0LXJhZGlvLWlkJykudmFsKGlkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFqYXhTZW5kKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCQoJyNyZXBvcnQtZW1haWwnKS52YWwoKSA9PT0gJycgfHwgJCgnI2lzc3VlJykudmFsKCkgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjcmVwb3J0LXZhbGlkYXRpb24nKS5mYWRlSW4oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS50ZXh0KHdwcmFkaW8uaTE4bi5zZW5kaW5nKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAkKCcucmVwb3J0LWZvcm0nKS5zZXJpYWxpemUoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiB3cHJhZGlvLmFqYXhVcmwsXHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NlbmRfcmVwb3J0JyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vbmNlOiB3cHJhZGlvLm5vbmNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcucmVwb3J0LWZvcm0nKS5hZGRDbGFzcygnc3VibWl0dGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvci5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5yZXBvcnQtZm9ybScpLnJlbW92ZUNsYXNzKCdzdWJtaXR0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50ZXh0KHdwcmFkaW8uaTE4bi5zZW5kTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfSlcclxufSkoalF1ZXJ5KTsiLCIoZnVuY3Rpb24gKCQpIHtcclxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnNldC1yZXZpZXctc3RhcnM+LnN0YXInLCBzZXRSZXZpZXcpO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjcmV2aWV3X3N1Ym1pdCcsIHN1Ym1pdFJldmlldyk7XHJcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5sb2FkLW1vcmUtcmV2aWV3JywgbG9hZE1vcmVSZXZpZXdzKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0UmV2aWV3KCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0b3JzID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgc2VsZWN0b3JzID0gc2VsZWN0b3JzLmFkZChzZWxlY3RvcnMucHJldkFsbCgpKTtcclxuICAgICAgICAgICAgY29uc3QgZGVfc2VsZWN0b3JzID0gJCh0aGlzKS5uZXh0QWxsKCk7XHJcblxyXG4gICAgICAgICAgICBzZWxlY3RvcnMuYWRkQ2xhc3MoJ2Rhc2hpY29ucy1zdGFyLWZpbGxlZCcpLnJlbW92ZUNsYXNzKCdkYXNoaWNvbnMtc3Rhci1lbXB0eScpO1xyXG4gICAgICAgICAgICBkZV9zZWxlY3RvcnMuYWRkQ2xhc3MoJ2Rhc2hpY29ucy1zdGFyLWVtcHR5JykucmVtb3ZlQ2xhc3MoJ2Rhc2hpY29ucy1zdGFyLWZpbGxlZCcpO1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5uZXh0KCkudmFsKCQodGhpcykuYXR0cignZGF0YS1yYXRlJykpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN1Ym1pdFJldmlldyhlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnUGxlYXNlLCBMb2dpbiB0byBzdWJtaXQgYSByZXZpZXcgZm9yIHRoaXMgcmFkaW8gc3RhdGlvbi4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCQoJyNyYXRpbmcnKS52YWwoKSA9PT0gJycgfHwgJCgnI3JldmlldycpLnZhbCgpID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgJCgnLnJldmlldy1mb3JtLW5vdGljZXMnKS5hZGRDbGFzcygnZXJyb3Igc2hvdycpLnRleHQoJ1BsZWFzZSBmaWxsIGFsbCB0aGUgZmllbGRzLicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9ICQoJyNyZXZpZXctZm9ybScpLnNlcmlhbGl6ZSgpO1xyXG5cclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHVybDogd3ByYWRpby5hamF4VXJsLFxyXG5cclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdzdWJtaXRfcmV2aWV3JyxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBub25jZTogd3ByYWRpby5ub25jZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICh7ZGF0YX0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS51cGRhdGUgfHwgJCgnLnJldmlldy1saXN0aW5nPi5jdXJyZW50LXVzZXItcmV2aWV3JykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5yZXZpZXctbGlzdGluZz4uY3VycmVudC11c2VyLXJldmlldycpLnJlcGxhY2VXaXRoKGRhdGEuaHRtbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSAkKCcucmV2aWV3LWxpc3Rpbmc+aDMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpdGxlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUuYWZ0ZXIoZGF0YS5odG1sKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5yZXZpZXctbGlzdGluZycpLmFwcGVuZChkYXRhLmh0bWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5yZXZpZXctZm9ybS1ub3RpY2VzJykuYWRkQ2xhc3MoJ3N1Y2Nlc3Mgc2hvdycpLnRleHQoJ1lvdXIgcmV2aWV3IGhhcyBiZWVuIHN1Ym1pdHRlZC4nKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvciksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZE1vcmVSZXZpZXdzKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCAkdGhpcyA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9ICQodGhpcykuYXR0cignZGF0YS1vZmZzZXQnKTtcclxuXHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IHdwcmFkaW8uYWpheFVybCxcclxuXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnbG9hZF9tb3JlX3Jldmlld3MnLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoe2RhdGF9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnJldmlldy1saXN0aW5nJykuYXBwZW5kKGRhdGEuaHRtbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuYXR0cignZGF0YS1vZmZzZXQnLCBvZmZzZXQgKyAxMCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpcy50ZXh0KCdObyBNb3JlIFJldmlld3MhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcbn0pKGpRdWVyeSk7IiwiaW1wb3J0ICcuLi9qcy9jb21wb25lbnRzL2hlbHBlcic7XHJcbmltcG9ydCAnLi4vanMvY29tcG9uZW50cy9wbGF5ZXInO1xyXG5pbXBvcnQgJy4uL2pzL2NvbXBvbmVudHMvcmV2aWV3JztcclxuaW1wb3J0ICcuLi9qcy9jb21wb25lbnRzL2FjY291bnQnO1xyXG5pbXBvcnQgJy4uL2pzL2NvbXBvbmVudHMvcmVwb3J0JztcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==